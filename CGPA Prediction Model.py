# -*- coding: utf-8 -*-
"""CS19126.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1v0KmR9et30rUzxMBkoj9Di_ySOdYW2xb

# `Group Members`
# CS-19107     Aiman
# CS-19126     Muhammad Umar
# CS-19131     Mir Shahnawaz Abbasi
"""

#Importing all libraries here that will be used in a different models
import pandas as pd
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn.svm import SVR
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt
from sklearn.metrics import mean_squared_error
from sklearn.metrics import mean_absolute_error
from random import randint
from sklearn.ensemble import RandomForestRegressor

# defining data
dataset=pd.read_csv('The_Grades_Dataset.csv')

"""# `Model 3`

---

Predicting CGPA of 4th Year 

# `Applying Linear Regression`
"""

dataset.head()    #Showing first 5 rows of the dataset

# specifying input features in variable x and target in varibale y

x= dataset.iloc[:,1:-8]
y=dataset[['CGPA']]
x=x.drop("MT-442" , axis=1)

x

#Filling Empty spaces and NaN in a cell

for col in x.columns:
    x[f'{col}'].fillna(x[f'{col}'].mode()[0], inplace = True)

#From 1 - 15, where 1 represents least weightage and 15 represents highest weightage of a gradepoint

X = {'A+': 15, 'A': 14, 'A-': 13, 'B+': 12, 'B': 11, 'B-': 10,
    'C+': 9, 'C': 8, 'C-': 7, 'D+': 6, 'D': 5, 'F': 4,
     'I' : 3, 'W': 2, 'WU': 1}
                
x = x.replace(X)    #replace all alphabetic grades with integer values

x

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2)  #splitting a data into testing(20%) and training(80%)

model1 = LinearRegression()    
model1.fit(x_train,y_train)     #Fitting a Model

model1_score = model1.score(x_train, y_train)    #Calculating a Training score by providing trained data
print('Training Score:' , round(model1_score*100, 3) , '%')

y_lin_pred1 = model1.predict(x_test)    #checking the prediction of a model by providing test data

model1_score = model1.score(x_test, y_test)           #Calculating a Testing score by providing test data
print('Testing Score:' , round(model1_score*100, 3) , '%')

lst = []                #empty list initiated
x_col = x.columns       #fetching column first element like a name of specific course

for i in x_col:
  enter = int(input(f'Enter grade of: \n{i}: '))
  lst.append(enter)     #list is appended with provided grade
lst2 = [lst]            #list is converted to 2D

lst1=model1.predict(lst2)         #Predict Gpa by providing individual course grade
lim_gpa=np.clip(lst1[0][0], a_min = 0, a_max = 4)     #if CGPA is in -ve then it will clamp to 0.0 if it greater than 4 will clamp to 4
print('CGPA: ' , round(lim_gpa, 3))

"""# `Evaluating Linear Regression for Model 3`

# i) Mean Squared Error
"""

# mean_squared_error
mse_lr_model3 = mean_squared_error(y_test, y_lin_pred1)
print("i - Mean Squared Error:", round(mse_lr_model3, 3))

"""# ii) Root Mean Squared Error"""

#root mean_squared_error
rmse_lr_model3 = mean_squared_error(y_test, y_lin_pred1, squared=False)
print("ii - Root Mean Squared Error:", round(rmse_lr_model3, 3))

"""# iii) Mean Absolute Error"""

#mean_absolute_error
mae_lr_model3 = mean_absolute_error(y_test, y_lin_pred1)
print("iii - Mean Absolute Error:", round(mae_lr_model3, 3))

print("i - Mean Squared Error:", round(mse_lr_model3, 3))
print("ii - Root Mean Squared Error:", round(rmse_lr_model3, 3))
print("iii - Mean Absolute Error:", round(mae_lr_model3, 3))

"""# **`Model 3`** 
Predicting CGPA of 4th Year 
# `SVM Support Vector Machine`
"""

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2)          #splitting a data into testing(20%) and training(80%)

regressor_1 = SVR(kernel='linear')       #applying svr and kernel is set to linear
regressor_1.fit(x_train,y_train)         #Fitting a Model

regressor_1_score = regressor_1.score(x_train, y_train)       #Calculating Training Score
print('Training Score:' , round(regressor_1_score*100, 3) , '%')

y_predict_svm = regressor_1.predict(x_test)     #predicting model

regressor_1_score = regressor_1.score(x_test, y_test)
print('Testing Score:' , round(regressor_1_score*100, 3) , '%')

"""# `Predicting CGPA by providing GPs of all courses from 1st to 3rd year`"""

lst_svm = []
x_col = x.columns

for i in x_col:
  enter = int(input(f'Enter grade of: \n{i}: '))
  lst_svm.append(enter)
lst_svm =[lst_svm]


y_svm_predict1 = regressor_1.predict(lst_svm)
lim_gpa1=np.clip(y_svm_predict1[0], a_min = 0, a_max = 4)
print('CGPA: ' , round(lim_gpa1, 3))

"""# `Evaluating SVR for Model 3`

# i) Mean Squared Error
"""

# mean_squared_error
mse_svr_model3 = mean_squared_error(y_test, y_predict_svm)
print("i - Mean Squared Error:", round(mse_svr_model3, 3))

"""#ii) Root Mean Squared Error"""

#root mean_squared_error
rmse_svr_model3 = mean_squared_error(y_test, y_predict_svm, squared=False)
print("ii - Root Mean Squared Error:", round(rmse_svr_model3, 3))

"""# iii) Mean Absolute Error """

#mean_absolute_error
mae_svr_model3 = mean_absolute_error(y_test, y_predict_svm)
print("iii - Mean Absolute Error:", round(mae_svr_model3, 3))

print("i - Mean Squared Error:", round(mse_svr_model3, 3))
print("ii - Root Mean Squared Error:", round(rmse_svr_model3, 3))
print("iii - Mean Absolute Error:", round(mae_svr_model3, 3))

"""# `Model 2 `

---


Predict Final CGPA based on GPs of first two years.
# `Implementation of Random Forest Regressor`

# `Data Preprocessing of Model 2 `
"""

#Columns of Dataset containing only the First and Second year Courses

#Assigning x as an input and y as an Output
x_model2= dataset.iloc[:,1:-20]
y=dataset[['CGPA']]

# Filling Empty Cells
for col in x_model2.columns:
    x_model2[f'{col}'].fillna(x[f'{col}'].mode()[0], inplace = True)

# Ordinal encoding
X = {'A+': 15, 'A': 14, 'A-': 13, 'B+': 12, 'B': 11, 'B-': 10,
    'C+': 9, 'C': 8, 'C-': 7, 'D+': 6, 'D': 5, 'F': 4,
     'I' : 3, 'W': 2, 'WU': 1}        
x_model2 = x_model2.replace(X)

x_train,x_test,y_train,y_test=train_test_split(x_model2,y,test_size=0.2)

# Fitting Random Forest Regression to the dataset
# create regressor object
regressor_rf = RandomForestRegressor(n_estimators = 100, random_state = 0)
# fit the regressor with x and y data
regressor_rf.fit(x_model2, y)

regressor_rf_score = regressor_rf.score(x_train, y_train)
print('Training Score:' , round(regressor_rf_score*100, 3) , '%')

y_predict_rf = regressor_rf.predict(x_test)

regressor_rf_score = regressor_rf.score(x_test, y_test)
print('Testing Score:' , round(regressor_rf_score*100, 3) , '%')

"""# `Predicting CGPA by providing GPs of 1st and 2nd year Courses`"""

lst_rf = []
x_col = x_model2.columns

for i in x_col:
  enter = int(input(f'Enter grade of: \n{i}: '))
  lst_rf.append(enter)
lst_rf =[lst_rf]


y_rf_predict1 = regressor_rf.predict(lst_rf)
print('CGPA: ' , round(y_rf_predict1[0], 3))

"""# `Evaluating Random Forest for Model 2`

# i) Mean Squared Error
"""

# mean_squared_error
mse_rf_model2 = mean_squared_error(y_test, y_predict_rf)
print("i - Mean Squared Error:", round(mse_rf_model2, 3))

"""# Root Mean Squared Error"""

#root mean_squared_error
rmse_rf_model2 = mean_squared_error(y_test, y_predict_rf, squared=False)
print("ii - Root Mean Squared Error:", round(rmse_rf_model2, 3))

"""# iii) Mean Absolute Error """

#mean_absolute_error
mae_rf_model2 = mean_absolute_error(y_test, y_predict_rf)
print("iii - Mean Absolute Error:", round(mae_rf_model2, 3))

print("i - Mean Squared Error:", round(mse_rf_model2, 3))
print("ii - Root Mean Squared Error:", round(rmse_rf_model2, 3))
print("iii - Mean Absolute Error:", round(mae_rf_model2, 3))

"""# `Model 2 `

---


Predict Final CGPA based on GPs of first two years.
# `Implementation of Linear Regression`
"""

model_2_LR = LinearRegression()
model_2_LR.fit(x_train,y_train)

model_2_LR_score = model_2_LR.score(x_train, y_train)
print('Training Score:' , round(model_2_LR_score*100, 3) , '%')

y_LR_2 = model_2_LR.predict(x_test)

model_2_LR_score = model_2_LR.score(x_test, y_test)
print('Testing Score:' , round(model_2_LR_score*100, 3) , '%')

"""# `Predicting CGPA by providing GPs of 1st and 2nd year Courses`"""

lst_LR = []
x_col = x_model2.columns

for i in x_col:
  enter = int(input(f'Enter grade of: \n{i}: '))
  lst_LR.append(enter)
lst_LR =[lst_LR]


lst_LR_predict=model_2_LR.predict(lst_LR)
lim_gpa2=np.clip(lst_LR_predict[0][0], a_min = 0, a_max = 4)
print('CGPA: ' , round(lim_gpa2, 3))

"""# `Evaluating Linear Regression for Model 2`

# i) Mean Squared Error
"""

# mean_squared_error
mse_lr_model2 = mean_squared_error(y_test, y_LR_2)
print("i - Mean Squared Error:", round(mse_lr_model2, 3))

"""# Root Mean Squared Error"""

#root mean_squared_error
rmse_lr_model2 = mean_squared_error(y_test, y_LR_2, squared=False)
print("ii - Root Mean Squared Error:", round(rmse_lr_model2, 3))

"""#iii) Mean Absolute Error"""

#mean_absolute_error
mae_lr_model2 = mean_absolute_error(y_test, y_LR_2)
print("iii - Mean Absolute Error:", round(mae_lr_model2, 3))

print("i - Mean Squared Error:", round(mse_lr_model2, 3))
print("ii - Root Mean Squared Error:", round(rmse_lr_model2, 3))
print("iii - Mean Absolute Error:", round(mae_lr_model2, 3))

"""# `Comparision of Two Models`"""

xcords = np.array(['Mean Squared Error', 'Root Mean Squared Error','Mean Absolute Error'])
ycords1 = np.array([mse_lr_model3, rmse_lr_model3, mae_lr_model3])
ycords2 = np.array([mse_svr_model3, rmse_svr_model3, mae_svr_model3])
ycords3 = np.array([mse_rf_model2, rmse_rf_model2, mae_rf_model2])
ycords4 = np.array([mse_lr_model2, rmse_lr_model2, mae_lr_model2])
plt.plot(xcords, ycords1,  label="Lin Reg - Model 3", marker='o')
plt.plot(xcords, ycords2,  label="SVM - Model 3", marker='o')
plt.plot(xcords, ycords3,  label="Rand Forest - Model 2", linestyle="--", marker='o')   #The graph is showing Comparison between different algorithm learned on a same dataset
plt.plot(xcords, ycords4,  label="Lin Reg - Model 2", marker='o', linestyle="--")       #The errors are just compared 

plt.legend()
plt.show()

